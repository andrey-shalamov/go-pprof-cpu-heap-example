// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel(in *jlexer.Lexer, out *FooRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hashes":
			if in.IsNull() {
				in.Skip()
				out.Hashes = nil
			} else {
				in.Delim('[')
				if out.Hashes == nil {
					if !in.IsDelim(']') {
						out.Hashes = make([]string, 0, 4)
					} else {
						out.Hashes = []string{}
					}
				} else {
					out.Hashes = (out.Hashes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Hashes = append(out.Hashes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel(out *jwriter.Writer, in FooRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hashes\":"
		out.RawString(prefix[1:])
		if in.Hashes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Hashes {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FooRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FooRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FooRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FooRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel(l, v)
}
func easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel1(in *jlexer.Lexer, out *FooReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(FooReq, 0, 2)
			} else {
				*out = FooReq{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 FooItem
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel1(out *jwriter.Writer, in FooReq) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v FooReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FooReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FooReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FooReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel1(l, v)
}
func easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel2(in *jlexer.Lexer, out *FooItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "srt_a":
			out.StrA = string(in.String())
		case "str_b":
			out.StrB = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel2(out *jwriter.Writer, in FooItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"srt_a\":"
		out.RawString(prefix[1:])
		out.String(string(in.StrA))
	}
	{
		const prefix string = ",\"str_b\":"
		out.RawString(prefix)
		out.String(string(in.StrB))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FooItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FooItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGoPprofCpuHeapExampleModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FooItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FooItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGoPprofCpuHeapExampleModel2(l, v)
}
